
kostka.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000008e  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003a7  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000034b  00000000  00000000  00000543  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001db  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000242  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	1a c0       	rjmp	.+52     	; 0x38 <__vector_1>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ee e8       	ldi	r30, 0x8E	; 142
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a6 36       	cpi	r26, 0x66	; 102
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>
  32:	1b d0       	rcall	.+54     	; 0x6a <main>
  34:	2a c0       	rjmp	.+84     	; 0x8a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <__vector_1>:
	T | A | B | C,	// 5
	T | B | C | D	// 6
};

ISR(INT0_vect)
{
  38:	1f 92       	push	r1
  3a:	0f 92       	push	r0
  3c:	0f b6       	in	r0, 0x3f	; 63
  3e:	0f 92       	push	r0
  40:	11 24       	eor	r1, r1
  42:	8f 93       	push	r24
  44:	ef 93       	push	r30
  46:	ff 93       	push	r31
	PORTB = 0x00;
  48:	18 ba       	out	0x18, r1	; 24
	while (!(PINB & T));
  4a:	b1 9b       	sbis	0x16, 1	; 22
  4c:	fe cf       	rjmp	.-4      	; 0x4a <__SREG__+0xb>
	PORTB = tabulka[TCNT0];
  4e:	e2 b7       	in	r30, 0x32	; 50
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	e0 5a       	subi	r30, 0xA0	; 160
  54:	ff 4f       	sbci	r31, 0xFF	; 255
  56:	80 81       	ld	r24, Z
  58:	88 bb       	out	0x18, r24	; 24
}
  5a:	ff 91       	pop	r31
  5c:	ef 91       	pop	r30
  5e:	8f 91       	pop	r24
  60:	0f 90       	pop	r0
  62:	0f be       	out	0x3f, r0	; 63
  64:	0f 90       	pop	r0
  66:	1f 90       	pop	r1
  68:	18 95       	reti

0000006a <main>:

int main(void)
{    
	DDRB = A | B | C | D;
  6a:	8d e1       	ldi	r24, 0x1D	; 29
  6c:	87 bb       	out	0x17, r24	; 23
	PORTB = T;
  6e:	82 e0       	ldi	r24, 0x02	; 2
  70:	88 bb       	out	0x18, r24	; 24
	
	// set counter mode CTC
	TCCR0A = 1<<WGM01;
  72:	8f bd       	out	0x2f, r24	; 47
	// cet compare register
	OCR0A = 5;	
  74:	85 e0       	ldi	r24, 0x05	; 5
  76:	86 bf       	out	0x36, r24	; 54
	// clear counter register
	TCNT0 = 0x00;
  78:	12 be       	out	0x32, r1	; 50
	// set frequency on cpu clk
	TCCR0B = 0x01;	
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	83 bf       	out	0x33, r24	; 51
	// set INR on falling edge
	MCUCR = 0x00;
  7e:	15 be       	out	0x35, r1	; 53
	// enable IRQ on INT0
	GIMSK = 1<<INT0; 
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	8b bf       	out	0x3b, r24	; 59
	// global IRQ enable
	sei();
  84:	78 94       	sei

	while (1) 
    {
		asm("nop");
  86:	00 00       	nop
    }
  88:	fe cf       	rjmp	.-4      	; 0x86 <main+0x1c>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>
